" @Author: Mariano Vall√©s (zucaritas(at)gmail.com)
" Some other from wmalik@gmail.com .vimrc
" Some stuff comes from hukl/dotfiles

" Essentials
syntax on
" Use Vim defaults instead of 100% vi compatibility
set nocompatible
" No folding
set nofoldenable
" Shows $ when in cw
set cpoptions+=$
set number
" Two spaces as identation
set tabstop=2
" Spaces as tab
set expandtab

set softtabstop=2
" Number of spaces as tab
set shiftwidth=2
" Get autoindent on <cr>, 'o' and 'O'
set autoindent
filetype off

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

Bundle 'derekwyatt/vim-scala'
"Bundle "kchmck/vim-coffee-script"
"Bundle "elixir-lang/vim-elixir"
Bundle "scrooloose/syntastic.git"
"Vundle to manage plugins
Bundle 'gmarik/vundle'
" Expand region selection
Bundle 'terryma/vim-expand-region'
Bundle 'kien/ctrlp.vim'
Bundle 'vim-ruby/vim-ruby'
Bundle 'oscarh/vimerl'
Bundle 'tpope/vim-surround'
Bundle 'elixir-lang/vim-elixir'
Bundle 'pangloss/vim-javascript'
Bundle 'mxw/vim-jsx'
"Should work for non jsx files too
let g:jsx_ext_required = 0

vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)

function! EnableHighlightAlign()
  echo virtcol('.')
  execute "set colorcolumn=+1," . virtcol('.')
endfunction
nnoremap <leader>h :call EnableHighlightAlign()<cr>
 
" Disable the highlight
function! DisableHighlightAlign()
  execute "set colorcolumn=+1"
endfunction
nnoremap <leader>H :call DisableHighlightAlign()<cr> 

"Gitcommit message max 72 chars
autocmd Filetype gitcommit setlocal spell textwidth=72

" Ruby text objects
"Bundle 'kana/vim-textobj-user'
"Bundle 'nelstrom/vim-textobj-rubyblock'
if has("autocmd")
  filetype indent plugin on
endif
" Move visual block
vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv

" Ag file searching
Bundle 'epmatsw/ag.vim'
" search in all files including gitignore
" search case sensitive if there is an uppercase letter
" search literally by default
let g:agprg="ag --column --smart-case --literal --ignore-dir .git"
" map Cmd-Shift-F to project search
map <D-F> :Ag!<Space>
" map Cmd-Shift-* to project search for word under cursor
nnoremap <D-*> <*>:Ag!<Space><C-R><C-W><CR>
set cursorline
" Syntax coloring lines that are too long just slows down the world
set synmaxcol=250
" No arrow keys
noremap <Up> <nop>
noremap <Down> <nop>
noremap <Left> <nop>
noremap <Right> <nop>
" 
" Enable loading plugin files and indent for specific filetypes
filetype plugin indent on
" 
" hukl file config {
" make uses real tabs
au FileType make set noexpandtab
" 
" Thorfile, Rakefile, Vagrantfile and Gemfile are Ruby
au BufRead,BufNewFile {Gemfile,Rakefile,Vagrantfile,Thorfile,config.ru} set ft=ruby
" 
" md, markdown, and mk are markdown and define buffer-local preview
au BufRead,BufNewFile *.{md,markdown,mdown,mkd,mkdn} call s:setupMarkup()
" 
" add json syntax highlighting
au BufNewFile,BufRead *.json set ft=javascript
" 
"au BufRead,BufNewFile *.{txt, md} call s:setupWrapping()

" Directories for swp files
set backupdir=~/.vimbackup
set directory=~/.vimbackup
 
" Set leader to ,
let mapleader="\\"
" Enhance command-line completion
set wildmenu
" Show all matches and complete till longest common
set wildmode=list:longest
" No sounds please
set vb t_vb=".
" Highlight the screen with the cursor
set cursorline
" Improve redrawing
set ttyfast
" Show current line & column of the cursor
set ruler
" Allow backspacing over [indent, eol, start]
set backspace=indent,eol,start
" Always have a status line on last window
set laststatus=2
" No wrapping on long lines
set nowrap
" One column to scroll horizontal
set sidescroll=1
" 
"this is to store all sw* files in /tmp
set directory=/tmp
" save an undofile to be able to undo changes after closing files
set undofile
set undodir=~/.vimtmp/undo
" Ignore cases in patterns
set ignorecase
" When pattern has uppercase ignore ignorecase
set smartcase
" Jump to matching bracket when inserting first
set showmatch
" Colorize column 80
set colorcolumn=80
" Enough mem, no swapping
set noswapfile

colorscheme Tomorrow-Night
 
" For disabling the macvim toolbar
if has("gui_running")
  set mouse=a
  set guioptions=egmrt
  set guioptions-=m
endif
" 
" Search incrementally and highlight
set incsearch
set hlsearch
" Ignore some common files
set wildignore=*.o,*~,*.beam,*.swf,*.mp3,*.jpg,*.png,*ebin,*.git
if filereadable(".vimrc.project")
  so .vimrc.project
endif
" 
" CtrlP
set runtimepath^=~/.vim/bundle/ctrlp.vim
" ctrlp custom ignores
let g:ctrlp_custom_ignore = {
      \ 'dir':  '\.git$\|\.hg$\|\.svn$\|\.eunit$',
      \ 'file': '\.exe$\|\.so$\|\.dll\|\.beam$\|\.DS_Store$'
      \ }
 
" Clear CtrlP cache when regaining focus
autocmd FocusGained * :CtrlPClearAllCaches
nnoremap <leader>t :CtrlP<cr>
" Map Ctrl+l to clear highlighted searches
nnoremap <silent> <C-l> :<C-u>nohlsearch<CR><C-l>

" From http://vimcasts.org/episodes/tidying-whitespace/
" Preserves/Saves the state, executes a command, and returns to the saved state
" Modified from http://vimbits.com/bits/231
" Remove trailing whitespace on save
function! Preserve(command)
  " Save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")
  " Do the business:
  execute a:command
"   " Clean up: restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction
" Execute clear whitespace on save
autocmd BufWritePre Gemfile,Rakefile,*.{py,scala,ex,exs,java,js,rb,ru,html,erl,erb} :call Preserve("%s/\\s\\+$//e")
" Save using leader key
nnoremap <Leader>w :w<CR>
" Parse json file using python
map <leader>j  :%!python -m json.tool<CR>
" Open a new tab with content
map <leader>T :tabnew %<cr>
" Moving between splits
nnoremap <Backspace> <C-w>w
nnoremap <S-Backspace> <C-w>
nnoremap <leader>w <C-w>v<C-w>l
nnoremap <C-j> <C-w>w
nnoremap <C-k> <C-w>W
 
" Esc is a fast jk in insert mode
inoremap jk <Esc>
" Editing .vimrc with ease
nnoremap <leader>ve :vsplit $MYVIMRC<cr>
nnoremap <leader>vs :source $MYVIMRC<cr>
