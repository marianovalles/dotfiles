" @Author: Mariano Vallés (zucaritas(at)gmail.com)
" Some other from wmalik@gmail.com .vimrc
" Some stuff comes from hukl/dotfiles
" Some stuff comes from zenbro/dotfiles

" Autoinstall vim-plug 
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.nvim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall
endif
call plug#begin('~/.vim/plugged') " Plugins initialization start 
Plug 'itchyny/lightline.vim'
Plug 'tpope/vim-sleuth'
Plug 'vim-scripts/indentpython.vim'
"Plug 'Valloric/YouCompleteMe', { 'do': 'python2 install.py --tern-completer' }
Plug 'neomake/neomake'
Plug 'tpope/vim-fugitive'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'tpope/vim-surround'
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
Plug 'davidhalter/jedi-vim', {'for': 'python'}
" Plug 'oscarh/vimerl'
" Plug 'SirVer/ultisnips'
" Plug 'honza/vim-snippets'
" Plug 'nvie/vim-flake8'
call plug#end()

" ## Appearance 
" ----------
set background=dark
colorscheme Tomorrow-Night

"" lightline
let g:lightline = {
      \ 'mode_map': {
      \   'n' : 'N',
      \   'i' : 'I',
      \   'R' : 'R',
      \   'v' : 'V',
      \   'V' : 'V-LINE',
      \   "\<C-v>": 'V-BLOCK',
      \   'c' : 'COMMAND',
      \   's' : 'SELECT',
      \   'S' : 'S-LINE',
      \   "\<C-s>": 'S-BLOCK',
      \   't': 'TERMINAL',
      \ },
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'fugitive', 'gitgutter', 'filename' ] ],
      \   'right': [ [ 'percent', 'lineinfo' ],
      \              [ 'syntastic' ],
      \              [ 'fileformat', 'fileencoding', 'filetype' ] ]
      \ },
      \ 'component_function': {
      \   'gitgutter': 'LightLineGitGutter',
      \   'readonly': 'LightLineReadonly',
      \   'modified': 'LightLineModified',
      \   'filename': 'LightLineFilename'
      \ },
      \ 'separator': { 'left': '░', 'right': '░' },
      \ 'subseparator': { 'left': '>', 'right': '' }
      \ }
  function! LightLineModified()
    if &filetype == "help"
      return ""
    elseif &modified
      return "+"
    elseif &modifiable
      return ""
    else
      return ""
    endif
  endfunction

  function! LightLineReadonly()
    if &filetype == "help"
      return ""
    elseif &readonly
      return "RO"
    else
      return ""
    endif
  endfunction

  function! LightLineFugitive()
    return exists('*fugitive#head') ? fugitive#head() : ''
  endfunction

  function! LightLineGitGutter()
    if ! exists('*GitGutterGetHunkSummary')
          \ || ! get(g:, 'gitgutter_enabled', 0)
          \ || winwidth('.') <= 90
      return ''
    endif
    let symbols = [
          \ g:gitgutter_sign_added,
          \ g:gitgutter_sign_modified,
          \ g:gitgutter_sign_removed
          \ ]
    let hunks = GitGutterGetHunkSummary()
    let ret = []
    for i in [0, 1, 2]
      if hunks[i] > 0
        call add(ret, symbols[i] . hunks[i])
      endif
    endfor
    return join(ret, ' ')
  endfunction

  function! LightLineFilename()
    return ('' != LightLineReadonly() ? LightLineReadonly() . ' ' : '') .
        \ ('' != expand('%:t') ? expand('%:t') : '[No Name]') .
        \ ('' != LightLineModified() ? ' ' . LightLineModified() : '')
  endfunction


" ## Completion
" -------------
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_seed_identifiers_with_syntax = 1
let g:ycm_collect_identifiers_from_tags_files = 1
let g:ycm_key_invoke_completion = '<c-j>'
let g:ycm_complete_in_strings = 1

" ## Python
" ---------
let g:jedi#popup_on_dot = 0
let g:jedi#use_splits_not_buffers = "left"

"Flake8 autocheck syntax on write
"let g:flake8_show_in_gutter=1  " show
" Python setup https://realpython.com/blog/python/vim-and-python-a-match-made-in-heaven/
" Folding
" set foldmethod=indent
" set foldlevel=99
" let g:SimpylFold_docstring_preview=1

filetype plugin indent on 
let $NVIM_TUI_ENABLE_CURSOR_SHAPE=1

" ## Set 
"-------
" Use Vim defaults instead of 100% vi compatibility
set nocompatible
set cb=unnamedplus
syntax on
if has("autocmd")
  filetype plugin indent on
endif

" Shows $ when in cw
set cpoptions+=$
set number
set autoindent
" Syntax coloring lines that are too long just slows down the world
set synmaxcol=250
set cursorline
" Directories for swp files
set directory=~/.vimbackup
" Enhance command-line completion
set wildmenu
" Show all matches and complete till longest common
set wildmode=list:longest
" No sounds please
set vb t_vb=".
" Highlight the screen with the cursor
set cursorline
" Improve redrawing
set ttyfast
" Show current line & column of the cursor
set ruler
" Allow backspacing over [indent, eol, start]
set backspace=indent,eol,start
" Always have a status line on last window
set laststatus=2
" No wrapping on long lines
set nowrap
" One column to scroll horizontal
set sidescroll=1
"this is to store all sw* files in /tmp
set directory=/tmp
" Ignore cases in patterns
set ignorecase
" When pattern has uppercase ignore ignorecase
set smartcase
" Jump to matching bracket when inserting first
set showmatch
" Colorize column 80
set colorcolumn=80
" Enough mem, no swapping
set noswapfile
" Search incrementally and highlight
set incsearch
set hlsearch
" Ignore some common files
set wildignore=*.o,*~,*.beam,*.swf,*.mp3,*.jpg,*.png,*ebin,*.git
let g:agprg="ag --column --smart-case --literal --ignore-dir .git"

" Autocommands
"==============

" make uses real tabs
au FileType make set noexpandtab
au BufNewFile,BufRead *.json set ft=javascript

" From http://vimcasts.org/episodes/tidying-whitespace/
" Preserves/Saves the state, executes a command, and returns to the saved state
" Modified from http://vimbits.com/bits/231
" Remove trailing whitespace on save
function! Preserve(command)
  " Save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")
  " Do the business:
  execute a:command
"   " Clean up: restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction

" Execute clear whitespace on save
au BufWritePre Gemfile,Rakefile,*.{py,scala,ex,exs,java,js,rb,ru,html,erl,erb} :call Preserve("%s/\\s\\+$//e")
"Gitcommit message max 72 chars
au Filetype gitcommit setlocal spell textwidth=72
"au BufWritePost *.py call Flake8()


" Mappings
"=========

" No arrow keys
noremap <Up> <nop>
noremap <Down> <nop>
noremap <Left> <nop>
noremap <Right> <nop>

let mapleader="\\"

function! EnableHighlightAlign()
  echo virtcol('.')
  execute "set colorcolumn=+1," . virtcol('.')
endfunction

nnoremap <leader>h :call EnableHighlightAlign()<cr>
"SimplyFold mapping
nnoremap <space> za
" Map Ctrl+l to clear highlighted searches
nnoremap <silent> <C-l> :<C-u>nohlsearch<CR><C-l>
nnoremap <leader>w :w<CR>
" Parse json file using python
map <leader>j  :%!python -m json.tool<CR>
map s :tabprev<CR>
map S :tabnext<CR>" 
" Open a new tab with content
map <leader>T :tabnew %<cr>
" Moving between splits
nnoremap <Backspace> <C-w>w
nnoremap <S-Backspace> <C-w>
nnoremap <leader>W <C-w>v<C-w>l
nnoremap <C-j> <C-w>w
nnoremap <C-k> <C-w>W
" Esc is a fast jk in insert mode
inoremap jk <Esc>
" Editing .vimrc with ease
nnoremap <leader>ve :vsplit $MYVIMRC<cr>
nnoremap <leader>vs :source $MYVIMRC<cr>
"FZF mapping ftw!
map <leader>t :FZF<CR>
map <C-F> :Ag<Space>
command! -bang -nargs=* Ag
  \ call fzf#vim#ag(<q-args>,
  \                 <bang>0 ? fzf#vim#with_preview('up:50%')
  \                         : fzf#vim#with_preview('right:50%:hidden', '?'),
  \                 <bang>0)

" NERDTree on Ctrl-N
map <C-n> :NERDTreeToggle<CR>
