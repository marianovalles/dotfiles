" @Author: Mariano Vall√©s (zucaritas(at)gmail.com)
" Some other from wmalik@gmail.com .vimrc
" Some stuff comes from hukl/dotfiles

call plug#begin('~/.vim/plugged')

Plug 'neomake/neomake.git'
"Plug 'vim-airline/vim-airline'
"Plug 'vim-airline/vim-airline-themes'
"Plug 'tpope/vim-fugitive'
Plug 'vim-scripts/indentpython.vim'
Plug 'nvie/vim-flake8'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
"Plugin 'ctrlpvim/ctrlp.vim'
"Plugin 'oscarh/vimerl'
Plug 'tpope/vim-surround'
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
" Ag file searching
Plug 'epmatsw/ag.vim'
" Python setup https://realpython.com/blog/python/vim-and-python-a-match-made-in-heaven/
Plug 'tmhedberg/SimpylFold'
Plug 'davidhalter/jedi-vim'
call plug#end()

filetype plugin indent on 

let $NVIM_TUI_ENABLE_CURSOR_SHAPE=1
let python_highlight_all=1
"Flake8 autocheck syntax on write
let g:flake8_show_in_gutter=1  " show

""""""""""""""""""""""""""""""""
"  SET 
""""""""""""""""""""""""""""""""

" Use Vim defaults instead of 100% vi compatibility
set nocompatible

set syntax

" Folding
set foldmethod=indent
set foldlevel=99
let g:SimpylFold_docstring_preview=1

" Shows $ when in cw
set cpoptions+=$
set number
" Two spaces as identation
set tabstop=4
" Spaces as tab
set expandtab
"Number of spaces that a <Tab> counts for
set softtabstop=4
" Number of spaces as tab
set shiftwidth=4
" Get autoindent on <cr>, 'o' and 'O'
set autoindent
" Syntax coloring lines that are too long just slows down the world
set synmaxcol=250

set cursorline
" Directories for swp files
set directory=~/.vimbackup
" Enhance command-line completion
set wildmenu
" Show all matches and complete till longest common
set wildmode=list:longest
" No sounds please
set vb t_vb=".
" Highlight the screen with the cursor
set cursorline
" Improve redrawing
set ttyfast
" Show current line & column of the cursor
set ruler
" Allow backspacing over [indent, eol, start]
set backspace=indent,eol,start
" Always have a status line on last window
set laststatus=2
" No wrapping on long lines
set nowrap
" One column to scroll horizontal
set sidescroll=1
"this is to store all sw* files in /tmp
set directory=/tmp
" Ignore cases in patterns
set ignorecase
" When pattern has uppercase ignore ignorecase
set smartcase
" Jump to matching bracket when inserting first
set showmatch
" Colorize column 80
set colorcolumn=80
" Enough mem, no swapping
set noswapfile

colorscheme Tomorrow-Night
 
" For disabling the macvim toolbar
if has("gui_running")
  set mouse=a
  set guioptions=egmrt
  set guioptions-=m
endif
" 
" Search incrementally and highlight
set incsearch
set hlsearch
" Ignore some common files
set wildignore=*.o,*~,*.beam,*.swf,*.mp3,*.jpg,*.png,*ebin,*.git
let g:agprg="ag --column --smart-case --literal --ignore-dir .git"

filetype off

"""""""""""""""""""""""""""
" AUTOCOMMANDS
"""""""""""""""""""""""""""
au BufRead,BufNewFile *.rb, {Gemfile,Rakefile,Vagrantfile,Thorfile,config.ru} set ft=ruby shiftwidth=2 tabstop=2 softtabstop=2
au BufNewFile,BufRead *.erl, *.hrl *.js, *.html, *.css, *.py
    \ set tabstop=4
    \ set softtabstop=4
    \ set shiftwidth=4
 
" make uses real tabs
au FileType make set noexpandtab
" Thorfile, Rakefile, Vagrantfile and Gemfile are Ruby
au BufRead,BufNewFile {Gemfile,Rakefile,Vagrantfile,Thorfile,config.ru} set ft=ruby
" md, markdown, and mk are markdown and define buffer-local preview
au BufRead,BufNewFile *.{md,markdown,mdown,mkd,mkdn} call s:setupMarkup()
" add json syntax highlighting
au BufNewFile,BufRead *.json set ft=javascript

" From http://vimcasts.org/episodes/tidying-whitespace/
" Preserves/Saves the state, executes a command, and returns to the saved state
" Modified from http://vimbits.com/bits/231
" Remove trailing whitespace on save
function! Preserve(command)
  " Save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")
  " Do the business:
  execute a:command
"   " Clean up: restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction

" Execute clear whitespace on save
au BufWritePre Gemfile,Rakefile,*.{py,scala,ex,exs,java,js,rb,ru,html,erl,erb} :call Preserve("%s/\\s\\+$//e")
"Gitcommit message max 72 chars
au Filetype gitcommit setlocal spell textwidth=72
au BufWritePost *.py call Flake8()


"""""""""""""""
" MAPPINGS
""""""""""""""

" No arrow keys
noremap <Up> <nop>
noremap <Down> <nop>
noremap <Left> <nop>
noremap <Right> <nop>

let mapleader="\\"

map <C-F> :Ag!<Space>

function! EnableHighlightAlign()
  echo virtcol('.')
  execute "set colorcolumn=+1," . virtcol('.')
endfunction
nnoremap <leader>h :call EnableHighlightAlign()<cr>
 
" Disable the highlight
function! DisableHighlightAlign()
  execute "set colorcolumn=+1"
endfunction
nnoremap <leader>H :call DisableHighlightAlign()<cr> 

nnoremap <space> za
" Map Ctrl+l to clear highlighted searches
nnoremap <silent> <C-l> :<C-u>nohlsearch<CR><C-l>
nnoremap <leader>w :w<CR>
" Parse json file using python
map <leader>j  :%!python -m json.tool<CR>
map s :tabprev<CR>
map S :tabnext<CR>" 
" Open a new tab with content
map <leader>T :tabnew %<cr>
" Moving between splits
nnoremap <Backspace> <C-w>w
nnoremap <S-Backspace> <C-w>
nnoremap <leader>W <C-w>v<C-w>l
nnoremap <C-j> <C-w>w
nnoremap <C-k> <C-w>W
 
" Esc is a fast jk in insert mode
inoremap jk <Esc>
" Editing .vimrc with ease
nnoremap <leader>ve :vsplit $MYVIMRC<cr>
nnoremap <leader>vs :source $MYVIMRC<cr>

"FZF mapping ftw!
map <leader>t :FZF<CR>

" NERDTree on Ctrl-N
map <C-n> :NERDTreeToggle<CR>
" Rewrite tags file
map <leader>c :!ctags -R .<cr>
